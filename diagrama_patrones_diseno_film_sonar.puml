@startuml Film Sonar - Patrones de Dise√±o

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontStyle bold
skinparam packageStyle rectangle
skinparam backgroundColor #FEFEFE
skinparam roundcorner 10

package "üéØ PATR√ìN STRATEGY" {
  note top of RecommendationStrategy : "Define una familia de algoritmos\nencapsul√°ndolos y haci√©ndolos\nintercambiables"
  
  interface RecommendationStrategy {
    <<interface>>
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    +strategy_name()
  }

  class GenreStrategy {
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    -strategy_name()
  }

  class DirectorStrategy {
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    -strategy_name()
  }

  class RecommendationService {
    -user: User
    -strategies: Array
    --
    +generate_recommendations(limit: integer)
    +get_recommendation_reasoning()
  }

  RecommendationStrategy <|.. GenreStrategy : implements
  RecommendationStrategy <|.. DirectorStrategy : implements
  RecommendationService --> RecommendationStrategy : uses strategies
}

package "üóÑÔ∏è PATR√ìN REPOSITORY" {
  note top of MovieRepository : "Abstrae la l√≥gica de acceso\na datos, centralizando\nlas consultas"
  
  class MovieRepository {
    +find_all()
    +find_by_filters(filters)
    +find_similar(movie, limit)
    +find_top_movies(limit)
    +find_by_id(id)
    +find_by_ids(ids)
    +search_by_title(title, limit)
    +find_by_director(director_id, limit)
    +find_by_genre(genre_id, limit)
  }

  class MoviesController {
    -movie_repository: MovieRepository
    +index()
    +show()
  }

  class Api::V1::MoviesController {
    -movie_repository: MovieRepository
    +index()
    +show()
    +similar()
    +top()
  }

  MoviesController --> MovieRepository : depends on
  Api::V1::MoviesController --> MovieRepository : depends on
}

package "üèóÔ∏è PATR√ìN TEMPLATE METHOD" {
  note top of ApplicationController : "Define el esqueleto de un\nalgoritmo en una clase base,\npermitiendo que las subclases\nsobrescriban pasos espec√≠ficos"
  
  class ApplicationController {
    <<abstract>>
    +authorize_manager!()
  }

  class Api::V1::BaseController {
    +authenticate_user!()
    +not_found(exception)
    +unprocessable_entity(exception)
    +bad_request(exception)
    +render_success(data, message)
    +render_error(message, status)
  }

  class Api::V1::MoviesController {
    +index()
    +show()
    +similar()
    +top()
  }

  class Api::V1::RecommendationsController {
    +index()
    +explore()
  }

  class Api::V1::UsersController {
    +profile()
    +favorites()
    +watched()
    +watchlist()
  }

  ApplicationController <|-- Api::V1::BaseController : extends
  Api::V1::BaseController <|-- Api::V1::MoviesController : extends
  Api::V1::BaseController <|-- Api::V1::RecommendationsController : extends
  Api::V1::BaseController <|-- Api::V1::UsersController : extends
}

package "üîó PATR√ìN OBSERVER" {
  note top of ExternalRating : "Define una dependencia uno-a-muchos\nentre objetos, de modo que cuando\nun objeto cambia, todos sus\ndependientes son notificados"
  
  class ExternalRating {
    +movie_id: bigint
    +source_name: string
    +score: string
    +vote_count: integer
    --
    +normalized_score()
    +effective_vote_count()
    +update_movie_weighted_score()
  }

  class Movie {
    +title: string
    +weighted_score: decimal
    --
    +calculate_weighted_score()
    +update_weighted_score!()
  }

  ExternalRating --> Movie : notifies on save/destroy
}

package "üé≠ PATR√ìN FACADE" {
  note top of RecommendationService : "Proporciona una interfaz\nunificada a un conjunto de\ninterfaces en un subsistema"
  
  class RecommendationService {
    -user: User
    -strategies: Array
    --
    +generate_recommendations(limit: integer)
    +get_recommendation_reasoning()
  }

  class User {
    +favorite_movies()
    +watched_movies()
    +watchlist_movies()
  }

  RecommendationService --> User : simplifies access to
}

package "üì¶ PATR√ìN VALUE OBJECT" {
  note top of ExternalRating : "Objetos inmutables que\nrepresentan conceptos del\ndominio de negocio"
  
  class ExternalRating {
    +source_name: string
    +score: string
    +vote_count: integer
    --
    +normalized_score()
    +effective_vote_count()
  }

  note right of ExternalRating : "Encapsula la l√≥gica de\nnormalizaci√≥n de puntuaciones\nde diferentes fuentes"
}

package "üîí PATR√ìN SINGLETON (Devise)" {
  note top of User : "Devise implementa el patr√≥n\nSingleton para la gesti√≥n\nde autenticaci√≥n"
  
  class User {
    +email: string
    +encrypted_password: string
    +role: string
    --
    +favorite_movies()
    +watched_movies()
    +watchlist_movies()
  }

  note right of User : "Devise maneja la autenticaci√≥n\nglobalmente en la aplicaci√≥n"
}

' Relaciones entre patrones
RecommendationService --> User : uses Facade pattern
MovieRepository --> Movie : uses Repository pattern
ExternalRating --> Movie : uses Observer pattern

' Notas explicativas
note as N1
  <b>Principios SOLID aplicados:</b>
  ‚Ä¢ <b>S</b>ingle Responsibility: Cada clase tiene una responsabilidad
  ‚Ä¢ <b>O</b>pen/Closed: Abierto para extensi√≥n, cerrado para modificaci√≥n
  ‚Ä¢ <b>L</b>iskov Substitution: Las estrategias son intercambiables
  ‚Ä¢ <b>I</b>nterface Segregation: Interfaces espec√≠ficas por patr√≥n
  ‚Ä¢ <b>D</b>ependency Inversion: Depende de abstracciones
end note

note as N2
  <b>Beneficios de los patrones:</b>
  ‚Ä¢ <b>Strategy:</b> F√°cil agregar nuevas estrategias de recomendaci√≥n
  ‚Ä¢ <b>Repository:</b> Centraliza acceso a datos, facilita testing
  ‚Ä¢ <b>Template Method:</b> Reutilizaci√≥n de c√≥digo en controladores
  ‚Ä¢ <b>Observer:</b> Actualizaci√≥n autom√°tica de puntuaciones
  ‚Ä¢ <b>Facade:</b> Simplifica la interfaz del sistema de recomendaciones
end note

@enduml 