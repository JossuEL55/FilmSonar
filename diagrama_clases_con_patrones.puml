@startuml Film Sonar - Clases con Patrones de Dise√±o

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 14
skinparam classFontStyle bold
skinparam packageStyle rectangle
skinparam backgroundColor #FEFEFE
skinparam roundcorner 15
skinparam classBackgroundColor #E8F4FD
skinparam interfaceBackgroundColor #FFF2CC
skinparam noteBackgroundColor #F0F8FF

package "üé¨ Entidades del Dominio" {
  class User {
    +email: string
    +role: string
    --
    +favorite_movies()
    +watched_movies()
    +watchlist_movies()
  }

  class Movie {
    +title: string
    +description: text
    +release_year: integer
    +weighted_score: decimal
    --
    +calculate_weighted_score()
    +update_weighted_score!()
  }

  class Director {
    +name: string
    +bio: text
  }

  class Genre {
    +name: string
  }

  class ExternalRating {
    +source_name: string
    +score: string
    +vote_count: integer
    --
    +normalized_score()
    +effective_vote_count()
    +update_movie_weighted_score()
  }
}

package "üìã Entidades de Interacci√≥n" {
  class Favorite {
    +user_id: bigint
    +movie_id: bigint
  }

  class WatchedEntry {
    +user_id: bigint
    +movie_id: bigint
    +watched_on: date
  }

  class WatchlistEntry {
    +user_id: bigint
    +movie_id: bigint
  }
}

package "üéØ PATR√ìN STRATEGY" {
  interface RecommendationStrategy {
    <<interface>>
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    +strategy_name()
  }

  class GenreStrategy {
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    -strategy_name()
  }

  class DirectorStrategy {
    +recommend(user_preferences, candidate_movies)
    +calculate_score(movie, preferences)
    -strategy_name()
  }

  class RecommendationService {
    -user: User
    -strategies: Array
    --
    +generate_recommendations(limit: integer)
    +get_recommendation_reasoning()
    -extract_user_preferences()
    -find_candidate_movies(preferences)
  }
}

package "üóÑÔ∏è PATR√ìN REPOSITORY" {
  class MovieRepository {
    +find_all()
    +find_by_filters(filters)
    +find_similar(movie, limit)
    +find_top_movies(limit)
    +find_by_id(id)
    +search_by_title(title, limit)
  }
}

package "üèóÔ∏è PATR√ìN TEMPLATE METHOD" {
  class ApplicationController {
    <<abstract>>
    +authorize_manager!()
  }

  class Api::V1::BaseController {
    +authenticate_user!()
    +not_found(exception)
    +unprocessable_entity(exception)
    +render_success(data, message)
    +render_error(message, status)
  }

  class MoviesController {
    -movie_repository: MovieRepository
    +index()
    +show()
    -setup_filters()
    -apply_sorting()
  }

  class Api::V1::MoviesController {
    -movie_repository: MovieRepository
    +index()
    +show()
    +similar()
    +top()
  }
}

' Relaciones de herencia (Template Method Pattern)
ApplicationController <|-- Api::V1::BaseController : "extiende"
Api::V1::BaseController <|-- MoviesController : "extiende"
Api::V1::BaseController <|-- Api::V1::MoviesController : "extiende"

' Relaciones de implementaci√≥n (Strategy Pattern)
RecommendationStrategy <|.. GenreStrategy : "implementa"
RecommendationStrategy <|.. DirectorStrategy : "implementa"
RecommendationService --> RecommendationStrategy : "usa estrategias"

' Relaciones de dependencia (Repository Pattern)
MoviesController --> MovieRepository : "usa"
Api::V1::MoviesController --> MovieRepository : "usa"
RecommendationService --> User : "analiza"

' Relaciones del dominio
User ||--o{ Favorite : "tiene"
User ||--o{ WatchedEntry : "marca"
User ||--o{ WatchlistEntry : "agrega"
User }o--|| Movie : "favoritas/vistas/watchlist"

Movie ||--o{ ExternalRating : "tiene"
Movie }o--|| Director : "dirigida por"
Movie }o--o{ Genre : "pertenece a"
Movie ||--o{ Favorite : "favorita de"
Movie ||--o{ WatchedEntry : "vista por"
Movie ||--o{ WatchlistEntry : "en watchlist de"

Director ||--o{ Movie : "dirige"

' Relaci√≥n Observer Pattern
ExternalRating --> Movie : "üîó notifica cambios"

note as N1
  <b>Patrones Aplicados:</b>
  ‚Ä¢ <b>Strategy:</b> Estrategias de recomendaci√≥n intercambiables
  ‚Ä¢ <b>Repository:</b> Abstracci√≥n del acceso a datos
  ‚Ä¢ <b>Template Method:</b> Reutilizaci√≥n en controladores
  ‚Ä¢ <b>Observer:</b> Actualizaci√≥n autom√°tica de puntuaciones
end note

note as N2
  <b>Principios SOLID:</b>
  ‚Ä¢ <b>S</b>ingle Responsibility: Cada clase tiene una responsabilidad
  ‚Ä¢ <b>O</b>pen/Closed: Abierto para extensi√≥n
  ‚Ä¢ <b>D</b>ependency Inversion: Depende de abstracciones
end note

@enduml 